name: Deploy to Amazon ECS

on:
    push:
        branches:
            - main
env:
    AWS_REGION: us-east-1
    AWS_ECR_REPOSITORY: ecs-test
    AWS_ECS_SERVICE: ecs-test
    AWS_ECS_CLUSTER: ecs-test
    AWS_ECS_TASK_DEFINITION: .github/workflows/task-definition.json
    AWS_ECS_CONTAINER_NAME: ecs-test
    AWS_ROLE_TO_ASSUME: arn:aws:iam::771392415588:role/qmehkari-github-role

permissions:
    id-token: write
    contents: read

jobs:
    deploy:
        name: Deploy to ECS
        runs-on: ubuntu-latest
        environment: production

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:                    
                role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
                aws-region: ${{ env.AWS_REGION }}
                role-session-name: GitHubActions
            
            - name: Log in to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                    IMAGE_TAG: ${{ github.sha }}
              run: |
                    docker build -t $ECR_REGISTRY/$AWS_ECR_REPOSITORY:$IMAGE_TAG .
                    docker push $ECR_REGISTRY/$AWS_ECR_REPOSITORY:$IMAGE_TAG
                    echo "::set-output name=image::$ECR_REGISTRY/$AWS_ECR_REPOSITORY:$IMAGE_TAG"

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                    task-definition: ${{ env.AWS_ECS_TASK_DEFINITION }}
                    container-name: ${{ env.AWS_ECS_CONTAINER_NAME }}
                    image: ${{ steps.build-image.outputs.image }}
            
            - name: Deploy to Amazon ECS
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                    task-definition: ${{ steps.task-def.outputs.task-definition }}
                    service: ${{ env.AWS_ECS_SERVICE }}
                    cluster: ${{ env.AWS_ECS_CLUSTER }}
                    wait-for-service-stability: true